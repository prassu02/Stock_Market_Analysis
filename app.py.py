# -*- coding: utf-8 -*-
"""deploy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TeTbWT43IXbbVvRHNF7ARnoFVGF97qOm
"""

# app.py
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from xgboost import XGBRegressor
import joblib

# Load dataset
@st.cache_data
def load_data():
    df = pd.read_csv('/content/AAPL .csv')  # Make sure to upload the dataset
    df['Date'] = pd.to_datetime(df['Date'], format="%d-%m-%Y")
    df = df.sort_values('Date')
    df['MA_7'] = df['Close'].rolling(window=7).mean()
    df['MA_30'] = df['Close'].rolling(window=30).mean()
    df['Volatility_7'] = df['Close'].rolling(window=7).std()
    df['Target_30'] = df['Close'].shift(-30)
    return df.dropna()

    import joblib
joblib.dump(xgb_model, "xgb_model.pkl")

# Load model
@st.cache_resource
def load_model():
    return joblib.load("xgb_model.pkl")  # Save your model as xgb_model.pkl

# Main function
def main():
    st.title("ðŸ“ˆ Apple Stock Price Forecasting")
    st.markdown("Predict Apple's stock price 30 days in advance using historical data and XGBoost.")

    df = load_data()
    model = load_model()

    st.subheader("ðŸ“Š Latest Available Data")
    st.write(df[['Date', 'Close']].tail())

    if st.button("Predict Next 30 Days"):
        last_row = df[["Open", "High", "Low", "Volume", "MA_7", "MA_30", "Volatility_7"]].iloc[-1:]
        predictions = []
        for i in range(30):
            pred = model.predict(last_row)[0]
            predictions.append(pred)

            # Simulate new row for next prediction
            new_row = last_row.copy()
            new_row["Close"] = pred
            new_row["MA_7"] = (new_row["MA_7"].values[0] * 6 + pred) / 7
            new_row["MA_30"] = (new_row["MA_30"].values[0] * 29 + pred) / 30
            new_row["Volatility_7"] = df["Close"].rolling(window=7).std().iloc[-1]
            last_row = new_row

        forecast_dates = pd.date_range(start=df['Date'].iloc[-1] + pd.Timedelta(days=1), periods=30)
        forecast_df = pd.DataFrame({'Date': forecast_dates, 'Forecasted Close': predictions})

        st.subheader("ðŸ”® 30-Day Forecast")
        st.line_chart(forecast_df.set_index('Date'))

        st.download_button("Download Forecast", forecast_df.to_csv(index=False), "forecast.csv", "text/csv")

if __name__ == '__main__':
    main()